# Generated by Django 2.0.5 on 2019-06-27 16:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('myapp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SlowQuery',
            fields=[
                ('checksum', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('fingerprint', models.TextField()),
                ('sample', models.TextField()),
                ('first_seen', models.DateTimeField(blank=True, null=True)),
                ('last_seen', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('reviewed_by', models.CharField(blank=True, max_length=20, null=True)),
                ('reviewed_on', models.DateTimeField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': '慢日志统计',
                'verbose_name_plural': '慢日志统计',
                'db_table': 'mysql_slow_query_review',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SlowQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname_max', models.CharField(max_length=64)),
                ('client_max', models.CharField(max_length=64, null=True)),
                ('user_max', models.CharField(max_length=64)),
                ('db_max', models.CharField(default=None, max_length=64, null=True)),
                ('bytes_max', models.CharField(max_length=64, null=True)),
                ('sample', models.TextField()),
                ('ts_min', models.DateTimeField(db_index=True)),
                ('ts_max', models.DateTimeField()),
                ('ts_cnt', models.FloatField(blank=True, null=True)),
                ('query_time_sum', models.FloatField(blank=True, db_column='Query_time_sum', null=True)),
                ('query_time_min', models.FloatField(blank=True, db_column='Query_time_min', null=True)),
                ('query_time_max', models.FloatField(blank=True, db_column='Query_time_max', null=True)),
                ('query_time_pct_95', models.FloatField(blank=True, db_column='Query_time_pct_95', null=True)),
                ('query_time_stddev', models.FloatField(blank=True, db_column='Query_time_stddev', null=True)),
                ('query_time_median', models.FloatField(blank=True, db_column='Query_time_median', null=True)),
                ('lock_time_sum', models.FloatField(blank=True, db_column='Lock_time_sum', null=True)),
                ('lock_time_min', models.FloatField(blank=True, db_column='Lock_time_min', null=True)),
                ('lock_time_max', models.FloatField(blank=True, db_column='Lock_time_max', null=True)),
                ('lock_time_pct_95', models.FloatField(blank=True, db_column='Lock_time_pct_95', null=True)),
                ('lock_time_stddev', models.FloatField(blank=True, db_column='Lock_time_stddev', null=True)),
                ('lock_time_median', models.FloatField(blank=True, db_column='Lock_time_median', null=True)),
                ('rows_sent_sum', models.FloatField(blank=True, db_column='Rows_sent_sum', null=True)),
                ('rows_sent_min', models.FloatField(blank=True, db_column='Rows_sent_min', null=True)),
                ('rows_sent_max', models.FloatField(blank=True, db_column='Rows_sent_max', null=True)),
                ('rows_sent_pct_95', models.FloatField(blank=True, db_column='Rows_sent_pct_95', null=True)),
                ('rows_sent_stddev', models.FloatField(blank=True, db_column='Rows_sent_stddev', null=True)),
                ('rows_sent_median', models.FloatField(blank=True, db_column='Rows_sent_median', null=True)),
                ('rows_examined_sum', models.FloatField(blank=True, db_column='Rows_examined_sum', null=True)),
                ('rows_examined_min', models.FloatField(blank=True, db_column='Rows_examined_min', null=True)),
                ('rows_examined_max', models.FloatField(blank=True, db_column='Rows_examined_max', null=True)),
                ('rows_examined_pct_95', models.FloatField(blank=True, db_column='Rows_examined_pct_95', null=True)),
                ('rows_examined_stddev', models.FloatField(blank=True, db_column='Rows_examined_stddev', null=True)),
                ('rows_examined_median', models.FloatField(blank=True, db_column='Rows_examined_median', null=True)),
                ('rows_affected_sum', models.FloatField(blank=True, db_column='Rows_affected_sum', null=True)),
                ('rows_affected_min', models.FloatField(blank=True, db_column='Rows_affected_min', null=True)),
                ('rows_affected_max', models.FloatField(blank=True, db_column='Rows_affected_max', null=True)),
                ('rows_affected_pct_95', models.FloatField(blank=True, db_column='Rows_affected_pct_95', null=True)),
                ('rows_affected_stddev', models.FloatField(blank=True, db_column='Rows_affected_stddev', null=True)),
                ('rows_affected_median', models.FloatField(blank=True, db_column='Rows_affected_median', null=True)),
                ('rows_read_sum', models.FloatField(blank=True, db_column='Rows_read_sum', null=True)),
                ('rows_read_min', models.FloatField(blank=True, db_column='Rows_read_min', null=True)),
                ('rows_read_max', models.FloatField(blank=True, db_column='Rows_read_max', null=True)),
                ('rows_read_pct_95', models.FloatField(blank=True, db_column='Rows_read_pct_95', null=True)),
                ('rows_read_stddev', models.FloatField(blank=True, db_column='Rows_read_stddev', null=True)),
                ('rows_read_median', models.FloatField(blank=True, db_column='Rows_read_median', null=True)),
                ('merge_passes_sum', models.FloatField(blank=True, db_column='Merge_passes_sum', null=True)),
                ('merge_passes_min', models.FloatField(blank=True, db_column='Merge_passes_min', null=True)),
                ('merge_passes_max', models.FloatField(blank=True, db_column='Merge_passes_max', null=True)),
                ('merge_passes_pct_95', models.FloatField(blank=True, db_column='Merge_passes_pct_95', null=True)),
                ('merge_passes_stddev', models.FloatField(blank=True, db_column='Merge_passes_stddev', null=True)),
                ('merge_passes_median', models.FloatField(blank=True, db_column='Merge_passes_median', null=True)),
                ('innodb_io_r_ops_min', models.FloatField(blank=True, db_column='InnoDB_IO_r_ops_min', null=True)),
                ('innodb_io_r_ops_max', models.FloatField(blank=True, db_column='InnoDB_IO_r_ops_max', null=True)),
                ('innodb_io_r_ops_pct_95', models.FloatField(blank=True, db_column='InnoDB_IO_r_ops_pct_95', null=True)),
                ('innodb_io_r_ops_stddev', models.FloatField(blank=True, db_column='InnoDB_IO_r_ops_stddev', null=True)),
                ('innodb_io_r_ops_median', models.FloatField(blank=True, db_column='InnoDB_IO_r_ops_median', null=True)),
                ('innodb_io_r_bytes_min', models.FloatField(blank=True, db_column='InnoDB_IO_r_bytes_min', null=True)),
                ('innodb_io_r_bytes_max', models.FloatField(blank=True, db_column='InnoDB_IO_r_bytes_max', null=True)),
                ('innodb_io_r_bytes_pct_95', models.FloatField(blank=True, db_column='InnoDB_IO_r_bytes_pct_95', null=True)),
                ('innodb_io_r_bytes_stddev', models.FloatField(blank=True, db_column='InnoDB_IO_r_bytes_stddev', null=True)),
                ('innodb_io_r_bytes_median', models.FloatField(blank=True, db_column='InnoDB_IO_r_bytes_median', null=True)),
                ('innodb_io_r_wait_min', models.FloatField(blank=True, db_column='InnoDB_IO_r_wait_min', null=True)),
                ('innodb_io_r_wait_max', models.FloatField(blank=True, db_column='InnoDB_IO_r_wait_max', null=True)),
                ('innodb_io_r_wait_pct_95', models.FloatField(blank=True, db_column='InnoDB_IO_r_wait_pct_95', null=True)),
                ('innodb_io_r_wait_stddev', models.FloatField(blank=True, db_column='InnoDB_IO_r_wait_stddev', null=True)),
                ('innodb_io_r_wait_median', models.FloatField(blank=True, db_column='InnoDB_IO_r_wait_median', null=True)),
                ('innodb_rec_lock_wait_min', models.FloatField(blank=True, db_column='InnoDB_rec_lock_wait_min', null=True)),
                ('innodb_rec_lock_wait_max', models.FloatField(blank=True, db_column='InnoDB_rec_lock_wait_max', null=True)),
                ('innodb_rec_lock_wait_pct_95', models.FloatField(blank=True, db_column='InnoDB_rec_lock_wait_pct_95', null=True)),
                ('innodb_rec_lock_wait_stddev', models.FloatField(blank=True, db_column='InnoDB_rec_lock_wait_stddev', null=True)),
                ('innodb_rec_lock_wait_median', models.FloatField(blank=True, db_column='InnoDB_rec_lock_wait_median', null=True)),
                ('innodb_queue_wait_min', models.FloatField(blank=True, db_column='InnoDB_queue_wait_min', null=True)),
                ('innodb_queue_wait_max', models.FloatField(blank=True, db_column='InnoDB_queue_wait_max', null=True)),
                ('innodb_queue_wait_pct_95', models.FloatField(blank=True, db_column='InnoDB_queue_wait_pct_95', null=True)),
                ('innodb_queue_wait_stddev', models.FloatField(blank=True, db_column='InnoDB_queue_wait_stddev', null=True)),
                ('innodb_queue_wait_median', models.FloatField(blank=True, db_column='InnoDB_queue_wait_median', null=True)),
                ('innodb_pages_distinct_min', models.FloatField(blank=True, db_column='InnoDB_pages_distinct_min', null=True)),
                ('innodb_pages_distinct_max', models.FloatField(blank=True, db_column='InnoDB_pages_distinct_max', null=True)),
                ('innodb_pages_distinct_pct_95', models.FloatField(blank=True, db_column='InnoDB_pages_distinct_pct_95', null=True)),
                ('innodb_pages_distinct_stddev', models.FloatField(blank=True, db_column='InnoDB_pages_distinct_stddev', null=True)),
                ('innodb_pages_distinct_median', models.FloatField(blank=True, db_column='InnoDB_pages_distinct_median', null=True)),
                ('qc_hit_cnt', models.FloatField(blank=True, db_column='QC_Hit_cnt', null=True)),
                ('qc_hit_sum', models.FloatField(blank=True, db_column='QC_Hit_sum', null=True)),
                ('full_scan_cnt', models.FloatField(blank=True, db_column='Full_scan_cnt', null=True)),
                ('full_scan_sum', models.FloatField(blank=True, db_column='Full_scan_sum', null=True)),
                ('full_join_cnt', models.FloatField(blank=True, db_column='Full_join_cnt', null=True)),
                ('full_join_sum', models.FloatField(blank=True, db_column='Full_join_sum', null=True)),
                ('tmp_table_cnt', models.FloatField(blank=True, db_column='Tmp_table_cnt', null=True)),
                ('tmp_table_sum', models.FloatField(blank=True, db_column='Tmp_table_sum', null=True)),
                ('tmp_table_on_disk_cnt', models.FloatField(blank=True, db_column='Tmp_table_on_disk_cnt', null=True)),
                ('tmp_table_on_disk_sum', models.FloatField(blank=True, db_column='Tmp_table_on_disk_sum', null=True)),
                ('filesort_cnt', models.FloatField(blank=True, db_column='Filesort_cnt', null=True)),
                ('filesort_sum', models.FloatField(blank=True, db_column='Filesort_sum', null=True)),
                ('filesort_on_disk_cnt', models.FloatField(blank=True, db_column='Filesort_on_disk_cnt', null=True)),
                ('filesort_on_disk_sum', models.FloatField(blank=True, db_column='Filesort_on_disk_sum', null=True)),
            ],
            options={
                'verbose_name': '慢日志明细',
                'verbose_name_plural': '慢日志明细',
                'db_table': 'mysql_slow_query_review_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Db_account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=30)),
                ('passwd', models.CharField(max_length=255)),
                ('role', models.CharField(choices=[('read1', 'read2'), ('write1', 'write2'), ('all1', 'all2'), ('admin1', 'admin2')], default='all2', max_length=30)),
                ('tags', models.CharField(db_index=True, max_length=30)),
                ('account', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Db_instance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_type', models.CharField(default='mysql', max_length=30)),
                ('ip', models.CharField(max_length=30)),
                ('port', models.CharField(max_length=10)),
                ('role', models.CharField(choices=[('read1', 'read2'), ('write1', 'write2'), ('all1', 'all2'), ('idle1', 'idle2'), ('admin1', 'admin2')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Db_name',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dbtag', models.CharField(max_length=30, unique=True)),
                ('dbname', models.CharField(max_length=30)),
                ('account', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('instance', models.ManyToManyField(to='myapp.Db_instance')),
            ],
        ),
        migrations.CreateModel(
            name='Oper_log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=35)),
                ('ipaddr', models.CharField(max_length=35)),
                ('dbtag', models.CharField(max_length=35)),
                ('dbname', models.CharField(max_length=40)),
                ('sqltext', models.TextField()),
                ('sqltype', models.CharField(max_length=20)),
                ('create_time', models.DateTimeField(db_index=True)),
                ('login_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='User_profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('select_limit', models.IntegerField(default=200)),
                ('export_limit', models.IntegerField(default=200)),
                ('task_email', models.IntegerField(db_index=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('can_mysql_query', 'can see mysql_query view'), ('can_log_query', 'can see log_query view'), ('can_see_execview', 'can see mysql exec view'), ('can_see_inception', 'can see inception view'), ('can_see_metadata', 'can see meta_data view'), ('can_see_mysqladmin', 'can see mysql_admin view'), ('can_export', 'can export csv'), ('can_insert_mysql', 'can insert mysql'), ('can_update_mysql', 'can update mysql'), ('can_delete_mysql', 'can delete mysql'), ('can_create_mysql', 'can create mysql'), ('can_drop_mysql', 'can drop mysql'), ('can_truncate_mysql', 'can truncate mysql'), ('can_alter_mysql', 'can alter mysql'), ('can_query_mongo', 'can query mongo'), ('can_see_taskview', 'can see task view'), ('can_admin_task', 'can admin task'), ('can_delete_task', 'can delete task'), ('can_update_task', 'can update task'), ('can_query_pri', 'can query pri'), ('can_set_pri', 'can set pri'), ('can_oper_saltapi', 'can oper saltapi')),
            },
        ),
        migrations.AlterIndexTogether(
            name='oper_log',
            index_together={('dbtag', 'sqltype', 'create_time')},
        ),
        migrations.AlterUniqueTogether(
            name='db_instance',
            unique_together={('ip', 'port')},
        ),
        migrations.AddField(
            model_name='db_account',
            name='dbname',
            field=models.ManyToManyField(to='myapp.Db_name'),
        ),
    ]
